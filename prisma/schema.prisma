generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Event {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  coverImage     String
  startDate      DateTime
  endDate        DateTime
  startTime      String
  isShowInHome   Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  username  String   @unique
  role_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model PasswordTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}

model Permissions {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Role      Role[]   @relation("PermissionsToRole")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User[]
  permissions Permissions[] @relation("PermissionsToRole")
}

model ContactMe {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id           Int      @id @default(autoincrement())
  name         String
  categoryId   Int
  locationId   Int
  description  String
  imagePath    String?
  isShowInHome Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  location     Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Dining {
  id           Int      @id @default(autoincrement())
  name         String
  category     String
  location     String
  description  String
  hours        String?
  rating       Float?
  imagePath    String?
  isShowInHome Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Promotion {
  id           Int      @id @default(autoincrement())
  title        String
  period       String?
  stores       String?
  description  String
  imagePath    String?
  isShowInHome Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model About {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  image           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  factsAndFigures FactAndFigure[]
  ourValues       OurValue[]
}

model OurValue {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  aboutId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  about       About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model FactAndFigure {
  id          Int      @id @default(autoincrement())
  number      String
  description String
  aboutId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  about       About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  name      String
  position  String
  bio       String
  imagePath String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id          Int      @id @default(autoincrement())
  question    String
  answer      String
  category    String
  orderNumber Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactInquiry {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String
  image      String
  isShowInHome Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HomeSetting {
  id               Int        @id @default(autoincrement())
  quickInfoTitle   String?
  quickInfoContent String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  heroImages       HeroImage[]
}

model HeroImage {
  id            Int         @id @default(autoincrement())
  title         String
  description   String?
  imagePath     String
  orderNumber   Int         @default(0)
  homeSettingId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  homeSetting   HomeSetting @relation(fields: [homeSettingId], references: [id], onDelete: Cascade)
}

model Location {
  id                      Int     @id @default(autoincrement())
  level                   Int
  storeNum                Int
  locationByDescription   String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  stores                  Store[]
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryName String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stores       Store[]
}
